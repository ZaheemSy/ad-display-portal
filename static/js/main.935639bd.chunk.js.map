{"version":3,"sources":["components/ImageUpload.js","App.js","index.js"],"names":["ImageUpload","_ref","onUpload","selectedFiles","setSelectedFiles","useState","React","createElement","type","multiple","accept","onChange","event","files","Array","from","target","style","marginBottom","marginTop","map","file","index","key","name","App","uploadedFiles","setUploadedFiles","cloudinaryImages","setCloudinaryImages","selectedImages","setSelectedImages","divideTime","setDivideTime","totalDuration","setTotalDuration","loading","setLoading","message","setMessage","useEffect","async","response","fetch","result","json","success","data","console","error","err","fetchCloudinaryImages","padding","fontFamily","resizedImages","Promise","all","resolve","Resizer","imageFileResizer","uri","resizeImage","base64","duration","length","checked","e","value","marginLeft","onClick","method","headers","Content-Type","body","JSON","stringify","public_ids","ok","filter","image","includes","public_id","disabled","img","publicId","prev","id","toggleSelectImage","src","url","alt","width","handleDeleteImage","payload","imageName","imageUrl","startDate","endDate","startTime","endTime","Math","floor","Number","log","errorData","some","backgroundColor","color","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.935639bd.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nfunction ImageUpload({ onUpload }) {\n  const [selectedFiles, setSelectedFiles] = useState([]);\n\n  const handleFileChange = (event) => {\n    const files = Array.from(event.target.files);\n    setSelectedFiles(files); // Store files locally\n    onUpload(files); // Pass files to the parent\n  };\n\n  return (\n    <div>\n      {/* File Input */}\n      <input\n        type=\"file\"\n        multiple\n        accept=\"image/*\"\n        onChange={handleFileChange}\n        style={{ marginBottom: '10px' }}\n      />\n      {/* Display File Names */}\n      <div style={{ marginTop: '10px' }}>\n        {selectedFiles.map((file, index) => (\n          <p key={index}>{file.name}</p>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default ImageUpload;\n","import React, { useState, useEffect } from 'react';\nimport ImageUpload from './components/ImageUpload';\nimport Resizer from 'react-image-file-resizer';\n\nfunction App() {\n  const [uploadedFiles, setUploadedFiles] = useState([]);\n  const [cloudinaryImages, setCloudinaryImages] = useState([]);\n  const [selectedImages, setSelectedImages] = useState([]);\n  const [divideTime, setDivideTime] = useState(false);\n  const [totalDuration, setTotalDuration] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n\n  // Fetch Cloudinary Images on Load\n  useEffect(() => {\n    const fetchCloudinaryImages = async () => {\n      try {\n        const response = await fetch('https://ad-display-backend.onrender.com/api/cloudinary-images');\n        const result = await response.json();\n        if (result.success) {\n          setCloudinaryImages(result.data);\n        } else {\n          console.error(result.error);\n        }\n      } catch (err) {\n        console.error('Error fetching Cloudinary images:', err);\n      }\n    };\n\n    fetchCloudinaryImages();\n  }, []);\n\n  const resizeImage = (file) =>\n    new Promise((resolve) => {\n      Resizer.imageFileResizer(\n        file,\n        800, // Max width\n        800, // Max height\n        'JPEG', // Output format\n        90, // Quality (0-100)\n        0, // Rotation\n        (uri) => resolve(uri),\n        'base64' // Output type\n      );\n    });\n\n  const handleUpload = async (files) => {\n    const resizedImages = await Promise.all(\n      Array.from(files).map((file) => resizeImage(file))\n    );\n    setUploadedFiles(\n      resizedImages.map((base64, index) => ({\n        file: files[index],\n        base64,\n        duration: 0,\n      }))\n    );\n  };\n\n  const handleRemoveImage = (index) => {\n    const updatedFiles = [...uploadedFiles];\n    updatedFiles.splice(index, 1);\n    setUploadedFiles(updatedFiles);\n  };\n\n  const handleDurationChange = (index, value) => {\n    const updatedFiles = [...uploadedFiles];\n    updatedFiles[index].duration = value;\n    setUploadedFiles(updatedFiles);\n  };\n\n  const calculateDividedDuration = () => {\n    if (uploadedFiles.length > 0 && totalDuration > 0) {\n      return Math.floor((totalDuration * 60) / uploadedFiles.length);\n    }\n    return 0;\n  };\n\n  const isSubmitDisabled = () => {\n    if (divideTime || uploadedFiles.length === 0) return false;\n    return uploadedFiles.some((image) => image.duration === 0);\n  };\n\n  const handleSubmit = async () => {\n    setLoading(true);\n    setMessage('');\n\n    for (const image of uploadedFiles) {\n      const payload = {\n        imageName: image.file.name,\n        imageUrl: image.base64,\n        startDate: '2024-11-20',\n        endDate: '2024-11-25',\n        startTime: '08:00:00',\n        endTime: '18:00:00',\n        duration: divideTime ? calculateDividedDuration() : Number(image.duration),\n      };\n\n      try {\n        const response = await fetch('https://ad-display-backend.onrender.com/api/images', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(payload),\n        });\n\n        if (response.ok) {\n          const result = await response.json();\n          console.log(`Image ${image.file.name} uploaded successfully:`, result);\n          setMessage(`Image ${image.file.name} uploaded successfully!`);\n        } else {\n          const errorData = await response.json();\n          console.error(`Error uploading ${image.file.name}:`, errorData.error);\n          setMessage(errorData.error || `Failed to upload ${image.file.name}.`);\n        }\n      } catch (err) {\n        console.error(`Error uploading ${image.file.name}:`, err);\n        setMessage(`An error occurred while uploading ${image.file.name}.`);\n      }\n    }\n\n    setLoading(false);\n    setUploadedFiles([]); // Clear uploaded files after submission\n  };\n\n  const handleDeleteImage = async (publicId) => {\n    try {\n      const response = await fetch(`https://ad-display-backend.onrender.com/api/cloudinary-images/${publicId}`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        setCloudinaryImages(cloudinaryImages.filter((image) => image.public_id !== publicId));\n        setMessage(`Image with Public ID ${publicId} deleted successfully!`);\n      } else {\n        const result = await response.json();\n        console.error(result.error);\n        setMessage(result.error);\n      }\n    } catch (err) {\n      console.error('Error deleting image:', err);\n    }\n  };\n\n  const handleBulkDelete = async () => {\n    try {\n      const response = await fetch('https://ad-display-backend.onrender.com/api/cloudinary-images/delete', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ public_ids: selectedImages }),\n      });\n\n      if (response.ok) {\n        setCloudinaryImages(\n          cloudinaryImages.filter((image) => !selectedImages.includes(image.public_id))\n        );\n        setSelectedImages([]);\n        setMessage('Selected images deleted successfully!');\n      } else {\n        const result = await response.json();\n        console.error(result.error);\n        setMessage(result.error);\n      }\n    } catch (err) {\n      console.error('Error deleting multiple images:', err);\n    }\n  };\n\n  const toggleSelectImage = (publicId) => {\n    setSelectedImages((prev) =>\n      prev.includes(publicId) ? prev.filter((id) => id !== publicId) : [...prev, publicId]\n    );\n  };\n\n  return (\n    <div style={{ padding: '20px', fontFamily: 'Arial' }}>\n      <h1>Ad Display Portal</h1>\n\n      <ImageUpload onUpload={handleUpload} />\n\n      {/* Upload Section */}\n      {uploadedFiles.length > 0 && (\n        <div style={{ marginTop: '20px' }}>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={divideTime}\n              onChange={(e) => setDivideTime(e.target.checked)}\n            />\n            Divide time Duration equally\n          </label>\n\n          {divideTime && (\n            <div style={{ marginTop: '10px' }}>\n              <label>Total Duration (in minutes): </label>\n              <input\n                type=\"number\"\n                value={totalDuration}\n                onChange={(e) => setTotalDuration(e.target.value)}\n                style={{ marginLeft: '10px' }}\n              />\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Cloudinary Image Management */}\n      <div>\n        <h2>Cloudinary Images</h2>\n        {cloudinaryImages.length > 0 && (\n          <div>\n            <button onClick={handleBulkDelete} disabled={selectedImages.length === 0}>\n              Delete Selected Images\n            </button>\n            <table>\n              <thead>\n                <tr>\n                  <th>\n                    <input\n                      type=\"checkbox\"\n                      checked={selectedImages.length === cloudinaryImages.length}\n                      onChange={() =>\n                        setSelectedImages(\n                          selectedImages.length === cloudinaryImages.length\n                            ? []\n                            : cloudinaryImages.map((img) => img.public_id)\n                        )\n                      }\n                    />\n                  </th>\n                  <th>Preview</th>\n                  <th>Public ID</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {cloudinaryImages.map((image) => (\n                  <tr key={image.public_id}>\n                    <td>\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedImages.includes(image.public_id)}\n                        onChange={() => toggleSelectImage(image.public_id)}\n                      />\n                    </td>\n                    <td>\n                      <img src={image.url} alt={image.public_id} style={{ width: '100px' }} />\n                    </td>\n                    <td>{image.public_id}</td>\n                    <td>\n                      <button onClick={() => handleDeleteImage(image.public_id)}>Delete</button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n\n      {/* Submit Button */}\n      <button\n        onClick={handleSubmit}\n        disabled={isSubmitDisabled() || loading}\n        style={{ marginTop: '20px', padding: '10px 20px', backgroundColor: 'blue', color: 'white' }}\n      >\n        {loading ? 'Uploading...' : 'Submit'}\n      </button>\n\n      {/* Message */}\n      {message && <p style={{ marginTop: '20px', color: 'red' }}>{message}</p>}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}