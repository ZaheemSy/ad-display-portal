{"version":3,"sources":["components/ImageUpload.js","App.js","index.js"],"names":["ImageUpload","_ref","onUpload","selectedFiles","setSelectedFiles","useState","React","createElement","type","multiple","accept","onChange","event","files","Array","from","target","style","marginBottom","marginTop","map","file","index","key","name","App","uploadedFiles","setUploadedFiles","divideTime","setDivideTime","totalDuration","setTotalDuration","loading","setLoading","message","setMessage","startDate","setStartDate","endDate","setEndDate","startTime","setStartTime","endTime","setEndTime","calculateDividedDuration","length","Math","floor","isSubmitDisabled","some","image","duration","padding","fontFamily","value","e","marginLeft","async","resizedImages","Promise","all","resolve","Resizer","imageFileResizer","uri","resizeImage","base64","checked","display","alignItems","src","alt","width","height","handleDurationChange","updatedFiles","disabled","onClick","splice","handleRemoveImage","payload","imageName","imageUrl","Number","response","fetch","method","headers","Content-Type","body","JSON","stringify","ok","result","json","console","log","errorData","error","err","backgroundColor","color","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.8a7f2170.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nfunction ImageUpload({ onUpload }) {\n  const [selectedFiles, setSelectedFiles] = useState([]);\n\n  const handleFileChange = (event) => {\n    const files = Array.from(event.target.files);\n    setSelectedFiles(files); // Store files locally\n    onUpload(files); // Pass files to the parent\n  };\n\n  return (\n    <div>\n      <input\n        type=\"file\"\n        multiple\n        accept=\"image/*\"\n        onChange={handleFileChange}\n        style={{ marginBottom: '10px' }}\n      />\n      <div style={{ marginTop: '10px' }}>\n        {selectedFiles.map((file, index) => (\n          <p key={index}>{file.name}</p>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default ImageUpload;\n","import React, { useState } from 'react';\nimport ImageUpload from './components/ImageUpload';\nimport Resizer from 'react-image-file-resizer';\n\nfunction App() {\n  const [uploadedFiles, setUploadedFiles] = useState([]);\n  const [divideTime, setDivideTime] = useState(false);\n  const [totalDuration, setTotalDuration] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [startTime, setStartTime] = useState('');\n  const [endTime, setEndTime] = useState('');\n\n  const resizeImage = (file) =>\n    new Promise((resolve) => {\n      Resizer.imageFileResizer(\n        file,\n        800, // Max width\n        800, // Max height\n        'JPEG', // Output format\n        90, // Quality (0-100)\n        0, // Rotation\n        (uri) => resolve(uri),\n        'base64' // Output type\n      );\n    });\n\n  const handleUpload = async (files) => {\n    const resizedImages = await Promise.all(\n      Array.from(files).map((file) => resizeImage(file))\n    );\n    setUploadedFiles(\n      resizedImages.map((base64, index) => ({\n        file: files[index],\n        base64,\n        duration: 0,\n      }))\n    );\n  };\n\n  const handleRemoveImage = (index) => {\n    const updatedFiles = [...uploadedFiles];\n    updatedFiles.splice(index, 1);\n    setUploadedFiles(updatedFiles);\n  };\n\n  const handleDurationChange = (index, value) => {\n    const updatedFiles = [...uploadedFiles];\n    updatedFiles[index].duration = value;\n    setUploadedFiles(updatedFiles);\n  };\n\n  const calculateDividedDuration = () => {\n    if (uploadedFiles.length > 0 && totalDuration > 0) {\n      return Math.floor((totalDuration * 60) / uploadedFiles.length);\n    }\n    return 0;\n  };\n\n  const isSubmitDisabled = () => {\n    if (!startDate || !endDate || !startTime || !endTime) return true; // Prevent submission if date/time is missing\n    if (divideTime || uploadedFiles.length === 0) return false;\n    return uploadedFiles.some((image) => image.duration === 0);\n  };\n\n  const handleSubmit = async () => {\n    setLoading(true);\n    setMessage('');\n\n    for (const image of uploadedFiles) {\n      const payload = {\n        imageName: image.file.name,\n        imageUrl: image.base64,\n        startDate,\n        endDate,\n        startTime,\n        endTime,\n        duration: divideTime ? calculateDividedDuration() : Number(image.duration),\n      };\n\n      try {\n        const response = await fetch('https://ad-display-backend.onrender.com/api/images', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(payload),\n        });\n\n        if (response.ok) {\n          const result = await response.json();\n          console.log(`Image ${image.file.name} uploaded successfully:`, result);\n          setMessage(`Image ${image.file.name} uploaded successfully!`);\n        } else {\n          const errorData = await response.json();\n          console.error(`Error uploading ${image.file.name}:`, errorData.error);\n          setMessage(errorData.error || `Failed to upload ${image.file.name}.`);\n        }\n      } catch (err) {\n        console.error(`Error uploading ${image.file.name}:`, err);\n        setMessage(`An error occurred while uploading ${image.file.name}.`);\n      }\n    }\n\n    setLoading(false);\n    setUploadedFiles([]); // Clear uploaded files after submission\n  };\n\n  return (\n    <div style={{ padding: '20px', fontFamily: 'Arial' }}>\n      <h1>Ad Display Portal</h1>\n\n      {/* Date and Time Input */}\n      <div style={{ marginBottom: '20px' }}>\n        <h3>Common Start/End Dates and Times</h3>\n        <div style={{ marginBottom: '10px' }}>\n          <label>\n            Start Date: \n            <input\n              type=\"date\"\n              value={startDate}\n              onChange={(e) => setStartDate(e.target.value)}\n              style={{ marginLeft: '10px' }}\n            />\n          </label>\n        </div>\n        <div style={{ marginBottom: '10px' }}>\n          <label>\n            End Date: \n            <input\n              type=\"date\"\n              value={endDate}\n              onChange={(e) => setEndDate(e.target.value)}\n              style={{ marginLeft: '10px' }}\n            />\n          </label>\n        </div>\n        <div style={{ marginBottom: '10px' }}>\n          <label>\n            Start Time: \n            <input\n              type=\"time\"\n              value={startTime}\n              onChange={(e) => setStartTime(e.target.value)}\n              style={{ marginLeft: '10px' }}\n            />\n          </label>\n        </div>\n        <div style={{ marginBottom: '10px' }}>\n          <label>\n            End Time: \n            <input\n              type=\"time\"\n              value={endTime}\n              onChange={(e) => setEndTime(e.target.value)}\n              style={{ marginLeft: '10px' }}\n            />\n          </label>\n        </div>\n      </div>\n\n      {/* Upload Section */}\n      <ImageUpload onUpload={handleUpload} />\n\n      {uploadedFiles.length > 0 && (\n        <div style={{ marginTop: '20px' }}>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={divideTime}\n              onChange={(e) => setDivideTime(e.target.checked)}\n            />\n            Divide time Duration equally\n          </label>\n\n          {divideTime && (\n            <div style={{ marginTop: '10px' }}>\n              <label>Total Duration (in minutes): </label>\n              <input\n                type=\"number\"\n                value={totalDuration}\n                onChange={(e) => setTotalDuration(e.target.value)}\n                style={{ marginLeft: '10px' }}\n              />\n            </div>\n          )}\n        </div>\n      )}\n\n      {uploadedFiles.length > 0 && (\n        <div style={{ marginTop: '20px' }}>\n          <h3>Uploaded Images</h3>\n          {uploadedFiles.map((image, index) => (\n            <div key={index} style={{ display: 'flex', alignItems: 'center', marginBottom: '10px' }}>\n              <img src={image.base64} alt={image.file.name} style={{ width: '60px', height: '60px' }} />\n              <input\n                type=\"number\"\n                value={divideTime ? calculateDividedDuration() : image.duration}\n                onChange={(e) => handleDurationChange(index, e.target.value)}\n                disabled={divideTime}\n                style={{ marginLeft: '10px' }}\n              />\n              <button onClick={() => handleRemoveImage(index)} style={{ marginLeft: '10px' }}>\n                Remove\n              </button>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Submit Button */}\n      <button\n        onClick={handleSubmit}\n        disabled={isSubmitDisabled() || loading}\n        style={{\n          marginTop: '20px',\n          padding: '10px 20px',\n          backgroundColor: isSubmitDisabled() ? 'grey' : 'blue',\n          color: 'white',\n        }}\n      >\n        {loading ? 'Uploading...' : 'Submit'}\n      </button>\n\n      {/* Message */}\n      {message && <p style={{ marginTop: '20px', color: 'red' }}>{message}</p>}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}