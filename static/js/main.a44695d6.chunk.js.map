{"version":3,"sources":["App.js","index.js"],"names":["App","uploadedFiles","setUploadedFiles","useState","divideTime","setDivideTime","totalDuration","setTotalDuration","startDate","setStartDate","endDate","setEndDate","startTime","setStartTime","endTime","setEndTime","React","createElement","style","fontFamily","padding","marginBottom","marginRight","backgroundColor","color","border","cursor","height","overflowY","map","file","index","key","name","display","gap","type","value","onChange","e","target","marginLeft","checked","flexDirection","image","alignItems","justifyContent","width","placeholder","length","Math","floor","duration","handleDurationChange","updatedFiles","disabled","onClick","splice","handleRemoveImage","async","console","log","marginTop","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.a44695d6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ImageUpload from './components/ImageUpload';\nimport Resizer from 'react-image-file-resizer';\n\nfunction App() {\n  const [uploadedFiles, setUploadedFiles] = useState([]);\n  const [divideTime, setDivideTime] = useState(false);\n  const [totalDuration, setTotalDuration] = useState(0);\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [startTime, setStartTime] = useState('');\n  const [endTime, setEndTime] = useState('');\n\n  const resizeImage = (file) =>\n    new Promise((resolve) => {\n      Resizer.imageFileResizer(\n        file,\n        800,\n        800,\n        'JPEG',\n        90,\n        0,\n        (uri) => resolve(uri),\n        'base64'\n      );\n    });\n\n  const handleUpload = async (files) => {\n    const resizedImages = await Promise.all(\n      Array.from(files).map((file) => resizeImage(file))\n    );\n    setUploadedFiles(\n      resizedImages.map((base64, index) => ({\n        file: files[index],\n        base64,\n        duration: 0,\n      }))\n    );\n  };\n\n  const handleRemoveImage = (index) => {\n    const updatedFiles = [...uploadedFiles];\n    updatedFiles.splice(index, 1);\n    setUploadedFiles(updatedFiles);\n  };\n\n  const handleDurationChange = (index, value) => {\n    const updatedFiles = [...uploadedFiles];\n    updatedFiles[index].duration = value;\n    setUploadedFiles(updatedFiles);\n  };\n\n  const calculateDividedDuration = () => {\n    if (uploadedFiles.length > 0 && totalDuration > 0) {\n      return Math.floor((totalDuration * 60) / uploadedFiles.length);\n    }\n    return 0;\n  };\n\n  const handleSubmit = async () => {\n    // Handle submission logic here\n    console.log('Submitting:', uploadedFiles, startDate, endDate, startTime, endTime);\n  };\n\n  return (\n    <div style={{ fontFamily: 'Arial', padding: '20px' }}>\n      <h1>Ad Display Portal</h1>\n\n      <div style={{ marginBottom: '20px' }}>\n        <button\n          style={{\n            padding: '10px 20px',\n            marginRight: '10px',\n            backgroundColor: 'black',\n            color: 'white',\n            border: 'none',\n            cursor: 'pointer',\n          }}\n        >\n          Choose Images\n        </button>\n        <button\n          style={{\n            padding: '10px 20px',\n            backgroundColor: 'black',\n            color: 'white',\n            border: 'none',\n            cursor: 'pointer',\n          }}\n        >\n          List Images\n        </button>\n      </div>\n\n      <div>\n        <h3>Uploaded Image(s) List</h3>\n        <div\n          style={{\n            border: '1px solid black',\n            height: '100px',\n            overflowY: 'scroll',\n            marginBottom: '20px',\n          }}\n        >\n          {uploadedFiles.map((file, index) => (\n            <p key={index} style={{ padding: '5px' }}>\n              {file.file.name}\n            </p>\n          ))}\n        </div>\n      </div>\n\n      <div style={{ marginBottom: '20px', display: 'flex', gap: '20px' }}>\n        <div>\n          <h3>Common Start/End Dates and Times</h3>\n          <div>\n            <label>\n              Start Date:\n              <input\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n                style={{ marginLeft: '10px' }}\n              />\n            </label>\n          </div>\n          <div>\n            <label>\n              End Date:\n              <input\n                type=\"date\"\n                value={endDate}\n                onChange={(e) => setEndDate(e.target.value)}\n                style={{ marginLeft: '10px' }}\n              />\n            </label>\n          </div>\n          <div>\n            <label>\n              Start Time:\n              <input\n                type=\"time\"\n                value={startTime}\n                onChange={(e) => setStartTime(e.target.value)}\n                style={{ marginLeft: '10px' }}\n              />\n            </label>\n          </div>\n          <div>\n            <label>\n              End Time:\n              <input\n                type=\"time\"\n                value={endTime}\n                onChange={(e) => setEndTime(e.target.value)}\n                style={{ marginLeft: '10px' }}\n              />\n            </label>\n          </div>\n        </div>\n        <div>\n          <div style={{ marginBottom: '10px' }}>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={divideTime}\n                onChange={(e) => setDivideTime(e.target.checked)}\n                style={{ marginRight: '10px' }}\n              />\n              Divide Time Duration Equally\n            </label>\n          </div>\n          {divideTime && (\n            <div>\n              <label>\n                Duration in Minutes:\n                <input\n                  type=\"number\"\n                  value={totalDuration}\n                  onChange={(e) => setTotalDuration(e.target.value)}\n                  style={{ marginLeft: '10px' }}\n                />\n              </label>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          border: '1px solid black',\n          padding: '10px',\n        }}\n      >\n        {uploadedFiles.map((image, index) => (\n          <div\n            key={index}\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n              marginBottom: '10px',\n              justifyContent: 'space-between',\n            }}\n          >\n            <div style={{ display: 'flex', alignItems: 'center', gap: '20px' }}>\n              <div\n                style={{\n                  width: '60px',\n                  height: '60px',\n                  backgroundColor: 'red',\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                  color: 'white',\n                }}\n              >\n                Thumbnail\n              </div>\n              <p>{image.file.name}</p>\n            </div>\n            <input\n              type=\"number\"\n              placeholder=\"Duration in seconds\"\n              value={divideTime ? calculateDividedDuration() : image.duration}\n              onChange={(e) => handleDurationChange(index, e.target.value)}\n              disabled={divideTime}\n            />\n            <button\n              onClick={() => handleRemoveImage(index)}\n              style={{\n                backgroundColor: 'red',\n                color: 'white',\n                padding: '10px 20px',\n                border: 'none',\n                cursor: 'pointer',\n              }}\n            >\n              Remove\n            </button>\n          </div>\n        ))}\n      </div>\n\n      <button\n        onClick={handleSubmit}\n        style={{\n          marginTop: '20px',\n          padding: '10px 20px',\n          backgroundColor: 'blue',\n          color: 'white',\n          border: 'none',\n          cursor: 'pointer',\n        }}\n      >\n        Submit\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}